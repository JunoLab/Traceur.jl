var documenterSearchIndex = {"docs":
[{"location":"#Traceur.jl-1","page":"Traceur.jl","title":"Traceur.jl","text":"","category":"section"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Performance linting for Julia.","category":"page"},{"location":"#Normal-Use-1","page":"Traceur.jl","title":"Normal Use","text":"","category":"section"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Traceur.@trace","category":"page"},{"location":"#Traceur.@trace","page":"Traceur.jl","title":"Traceur.@trace","text":"@trace(functioncall(args...), maxdepth=2, modules=[])\n\nAnalyse functioncall(args...) for common performance problems and print them to the terminal.\n\nOptional arguments:\n\nmaxdepth constrols how far Traceur recurses through the call stack.\nIf modules is nonempty, only warnings for methods defined in one of the modules specified will be printed.\n\n\n\n\n\n","category":"macro"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Traceur.warnings","category":"page"},{"location":"#Traceur.warnings","page":"Traceur.jl","title":"Traceur.warnings","text":"warnings(f; kwargs...)::Vector{Traceur.Warnings}\n\nCollect all warnings generated by Traceur's analysis of the execution of the no-arg function f and return them.\n\nPossible keyword arguments:\n\nmaxdepth=typemax(Int) constrols how far Traceur recurses through the call stack.\nIf modules is nonempty, only warnings for methods defined in one of the modules specified will be printed.\n\n\n\n\n\n","category":"function"},{"location":"#Tests-1","page":"Traceur.jl","title":"Tests","text":"","category":"section"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Traceur.@check","category":"page"},{"location":"#Traceur.@check","page":"Traceur.jl","title":"Traceur.@check","text":"@check fun(args...) nowarn=[] except=[] maxdepth=typemax(Int)\n\nRun Traceur on fun, and throw an error if any warnings occur inside functions tagged with @should_not_warn or specified in nowarn.\n\nTo throw an error if any warnings occur inside any functions, set nowarn=:all.\n\nTo throw an error if any warnings occur inside any functions EXCEPT for a certain set of functions, list the exceptions in the except variable, for example except=[f,g,h]\n\n\n\n\n\n","category":"macro"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Traceur.check","category":"page"},{"location":"#Traceur.check","page":"Traceur.jl","title":"Traceur.check","text":"check(f::Function; nowarn=[], except=[], kwargs...)\n\nRun Traceur on f, and throw an error if any warnings occur inside functions tagged with @should_not_warn or specified in nowarn.\n\nTo throw an error if any warnings occur inside any functions, set nowarn=:all.\n\nTo throw an error if any warnings occur inside any functions EXCEPT for a certain set of functions, list the exceptions in the except variable, for example except=[f,g,h]\n\n\n\n\n\n","category":"function"},{"location":"#","page":"Traceur.jl","title":"Traceur.jl","text":"Traceur.@should_not_warn","category":"page"},{"location":"#Traceur.@should_not_warn","page":"Traceur.jl","title":"Traceur.@should_not_warn","text":"@should_not_warn function foo(x)\n  ...\nend\n\nAdd foo to the list of functions in which no warnings may occur (checkd by @check).\n\n\n\n\n\n","category":"macro"}]
}
